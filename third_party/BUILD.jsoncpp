# JsonCpp is a C++ library that allows manipulating JSON values, including
# serialization and deserialization to and from strings.

licenses(["unencumbered"])

exports_files(["LICENSE"])

JSONCPP_VERSION_DEFINES = [
    "-DJSONCPP_VERSION_STRING=1.8.4",
    "-DJSONCPP_VERSION_MAJOR=1",
    "-DJSONCPP_VERSION_MINOR=8",
    "-DJSONCPP_VERSION_PATCH=4",
]

cc_library(
    name = "jsoncpp",
    srcs = [
        "src/lib_json/json_reader.cpp",
        "src/lib_json/json_tool.h",
        "src/lib_json/json_value.cpp",
        "src/lib_json/json_writer.cpp",
    ],
    hdrs = [
        "include/json/allocator.h",
        "include/json/assertions.h",
        "include/json/autolink.h",
        "include/json/config.h",
        "include/json/features.h",
        "include/json/forwards.h",
        "include/json/json.h",
        "include/json/reader.h",
        "include/json/value.h",
        "include/json/version.h",
        "include/json/writer.h",
    ],
    copts = JSONCPP_VERSION_DEFINES,
    includes = ["include"],
    textual_hdrs = ["src/lib_json/json_valueiterator.inl"],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "jsoncpp_test",
    testonly = 1,
    srcs = [
        "src/test_lib_json/jsontest.cpp",
        "src/test_lib_json/jsontest.h",
        "src/test_lib_json/main.cpp",
    ],
    deps = [":jsoncpp"],
)

py_test(
    name = "rununittests",
    srcs = ["test/rununittests.py"],
    args = ["$(location :jsoncpp_test)"],
    data = [":jsoncpp_test"],
)

cc_binary(
    name = "jsontest",
    testonly = 1,
    srcs = ["src/jsontestrunner/main.cpp"],
    deps = [":jsoncpp"],
)

py_binary(
    name = "runjsontests",
    testonly = 1,
    srcs = ["test/runjsontests.py"],
)

filegroup(
    name = "test_data_filegroup",
    testonly = 1,
    srcs = glob(["test/data/**"]),
)

genrule(
    name = "test_data_zip",
    testonly = 1,
    srcs = [":test_data_filegroup"],
    outs = ["test_data.zip"],
    cmd = "zip -q -j $@ $(locations :test_data_filegroup)",
)

# test/runjsontests.py runs a glob to find all the tests, so we need to ensure
# that the files are in the right place. It also expects to be able to create
# new files in the same directory as the tests. This genrule provides an
# environment for runjsontests.py to run in.
genrule(
    name = "bazel_runjsontests_runner",
    testonly = 1,
    outs = ["runjsontests_bazel.sh"],
    cmd = "echo '#! /bin/sh' >> $@;" +
          "echo 'mkdir test;' >> $@;" +
          "echo 'unzip -d test/data -q $$1;' >> $@;" +
          "echo '$$2 $$3 test/data' >> $@",
)

sh_test(
    name = "jsontests",
    srcs = ["runjsontests_bazel.sh"],
    args = ["$(location :test_data_zip) $(location :runjsontests) $(location :jsontest)"],
    data = [
        ":jsontest",
        ":runjsontests",
        ":test_data_zip",
    ],
)
