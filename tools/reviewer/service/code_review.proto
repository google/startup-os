syntax = "proto3";

package com.google.startupos.tools.reviewer.service;

option java_package = "com.google.startupos.tools.reviewer.service";
option java_outer_classname = "Protos";

import "common/text_difference.proto";
import "google/protobuf/empty.proto";

service CodeReviewService {
  // Get a text file's contents
  rpc getFile(FileRequest) returns (FileResponse);
  rpc createDiff(CreateDiffRequest) returns (.google.protobuf.Empty);
  rpc getTextDiff(TextDiffRequest) returns (TextDiffResponse);
  // returns available diff number and increments stored value by one
  rpc getAvailableDiffNumber(.google.protobuf.Empty)
      returns (DiffNumberResponse);
  rpc getDiff(GetDiffRequest) returns (Diff);
}

message FileRequest { string filename = 1; }

message FileResponse { string content = 1; }

message CreateDiffRequest { Diff diff = 1; }

message DiffNumberResponse { int64 last_diff_id = 1; }

message TextDiffRequest {
  File left_file = 1;
  File right_file = 2;
}

message TextDiffResponse {
  // The changes of the second file.
  repeated com.google.startupos.common.TextChange changes = 1;
  string left_file_contents = 2;
  string right_file_contents = 3;
}

message GetDiffRequest { int64 diff_id = 1; }

// TODO: Separate non-request/response messages into a separate file. This
// resulted in issues
//   when attempted (couldn't import another proto) but maybe they've since been
//   fixed.
message Diff {
  enum Status {
    REVIEW_NOT_STARTED = 0;
    NEEDS_MORE_WORK = 1;
    UNDER_REVIEW = 2;
    ACCEPTED = 3;
    SUBMITTING = 4;
    SUBMITTED = 5;
    REVERTING = 6;
    REVERTED = 7;
  }

  int64 firestore_id = 1;
  int64 number = 2;
  // The main author of the diff, though certain snapshots can be made by others.
  Author author = 3;
  repeated Reviewer reviewer = 4;
  string description = 5;
  string bug = 6;
  Status status = 7;

  string workspace = 8;
  int64 created_timestamp = 9;
  int64 modified_timestamp = 10;
  repeated Thread thread = 13;
}

message Reviewer {
  string name = 1;
  bool needsAttention = 2;
  bool approved = 3;
}

message Author {
  string name = 1;
  bool needsAttention = 2;
}

/* A file can be:
 * - A committed file, in head repo
 *   <base>/head/<repo_id>/<commit_id>/<filename>
 *
 * - A local file for current user
 *   <base>/ws/<workspace>/<repo_id>/<filename>
 * - A committed file for current user
 *   <base>/ws/<workspace>/<repo_id>/<commit_id>/<filename>
 *
 * - A local file for other user
 *   <base>/users/<user>/ws/<workspace>/<repo_id>/<filename>
 * - A committed file for other user
 *   <base>/users/<user>/ws/<workspace>/<repo_id>/<commit_id>/<filename>
 *
 * Note that above paths are "conceptual" and not real filesystem paths.
 * The distinction between the above, is based on the fields, e.g user being
 * empty or not.
 */
message File {
  enum Action {
    ADD = 0;
    DELETE = 1;
    RENAME = 2;
    MODIFY = 3;
  }
  // Includes the path + filename, relative to repo
  string filename = 1;
  // Empty if referring to base/head or current user
  string user = 2;
  // Empty if referring to base/head
  string workspace = 3;
  string repo_id = 4;
  // Empty if referring to a local file
  string commit_id = 5;
  Action action = 6;
}

message Thread {
  string repo_id = 1;
  string commit_id = 2;
  File file = 3;
  int32 line_number = 4;
  bool is_done = 5;
  repeated Comment comment = 6;
}

message Comment {
  string content = 1;
  int64 timestamp = 2;
  string created_by = 3;
}
