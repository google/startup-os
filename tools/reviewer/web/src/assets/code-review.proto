// The file was copied from
// https://github.com/google/startup-os/blob/master/tools/reviewer/service/code_review.proto
// Original proto contains import and it doesn't work with protoc for some
// reason.

syntax = "proto3";

message File {
  enum Action {
    ADD = 0;
    DELETE = 1;
    RENAME = 2;
    MODIFY = 3;
  }
  // Includes the path + filename, relative to repo
  string filename = 1;
  // Empty if referring to base/head or current user
  string user = 2;
  // Empty if referring to base/head
  string workspace = 3;
  string repo_id = 4;
  // Empty if referring to a local file
  string commit_id = 5;
  Action action = 6;
}

message Commit {
  string id = 1;
  repeated File file = 2;
}

message BranchInfo {
  int64 diff_id = 1;
  string repo_id = 2;
  // Commits since divergence from master
  repeated Commit commit = 3;
  repeated File uncommitted_file = 4;
}

message TextChange {
  /** Describes the type of the difference. */
  enum Type {
    // Unused.
    TYPE_UNUSED = 0;

    // No change has occurred. The source is equal to the
    // destination.
    NO_CHANGE = 1;

    // A new character was added to the source.
    ADD = 2;

    // A character was deleted from the source.
    DELETE = 3;
  }

  // The index in which the difference has occurred in the first string. For
  // example, if we have the two strings, "Exampl" and "Example", the index
  // would be 5.
  int64 first_string_index = 1;

  // The index in which the difference has occurred in the second string. For
  // example, if we have the two strings, "Exampl" and "Example", the index
  // would be 6.
  int64 second_string_index = 2;

  // The string of the difference. Limited to hold only one character. In
  // the example of the two strings "Exampl" and "Example" it would be the
  // last "e".
  string difference = 3;

  // The {@link Type} of the difference, i.e. what change has occurred. In the
  // example of the two strings "Exampl" and "Example" it would be {@link
  // Type.ADD}.
  Type type = 4;
}

message Empty {}

service CodeReviewService {
  // Get a text file's contents
  rpc getFile(FileRequest) returns (FileResponse);
  rpc createDiff(CreateDiffRequest) returns (Empty);
  rpc getTextDiff(TextDiffRequest) returns (TextDiffResponse);
  // returns available diff number and increments stored value by one
  rpc getAvailableDiffNumber(Empty) returns (DiffNumberResponse);
  rpc getDiff(DiffRequest) returns (Diff);
  rpc getDiffFiles(DiffFilesRequest) returns (DiffFilesResponse);
}

message FileRequest { string filename = 1; }

message FileResponse { string content = 1; }

message CreateDiffRequest { Diff diff = 1; }

message DiffNumberResponse { int64 last_diff_id = 1; }

message TextDiffRequest {
  File left_file = 1;
  File right_file = 2;
}

message TextDiffResponse {
  // The changes of the second file.
  repeated TextChange changes = 1;
  string left_file_contents = 2;
  string right_file_contents = 3;
}

message DiffFilesRequest {
  string workspace = 1;
  int64 diff_id = 2;
}

message DiffFilesResponse { repeated BranchInfo branchInfo = 1; }

message DiffRequest { int64 diff_id = 1; }

// TODO: Separate non-request/response messages into a separate file. This
// resulted in issues
//   when attempted (couldn't import another proto) but maybe they've since been
//   fixed.
message Diff {
  enum Status {
    REVIEW_NOT_STARTED = 0;
    NEEDS_MORE_WORK = 1;
    UNDER_REVIEW = 2;
    ACCEPTED = 3;
    SUBMITTING = 4;
    SUBMITTED = 5;
    REVERTING = 6;
    REVERTED = 7;
  }

  int64 id = 1;
  // The main author of the diff, though certain snapshots can be made by
  // others.
  Author author = 2;
  repeated Reviewer reviewer = 3;
  repeated string cc = 4; // email list
  string description = 5;
  string bug = 6;
  Status status = 7;

  string workspace = 8;
  int64 created_timestamp = 9;
  int64 modified_timestamp = 10;
  repeated Thread thread = 11;
}

message Reviewer {
  string email = 1;
  // TODO: s/needsAttention/needs_attention
  // NOTICE: it will influence dependent code.
  // e.g. getNeedsattention() -> getNeedsAttention()
  bool needsAttention = 2;
  bool approved = 3;
}

message Author {
  string email = 1;
  bool needsAttention = 2;
}

message Thread {
  string repo_id = 1;
  string commit_id = 2;
  File file = 3;
  int32 line_number = 4;
  bool is_done = 5;
  repeated Comment comment = 6;
}

message Comment {
  string content = 1;
  int64 timestamp = 2;
  string created_by = 3;
}
